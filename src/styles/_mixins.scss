@import 'functions';

@mixin center-me($max-width, $margin-top: 0, $margin-bottom: 0) {
  max-width: $max-width;
  margin: $margin-top auto $margin-bottom;
}

@mixin svg-colorized($svg, $color: $black) {
  $svg-colorized: svg-color($svg, $color);

  background-image: $svg-colorized;
}

@mixin unbutton {
  border: 0;
  padding: 0;
  margin: 0;
  background-color: transparent;
  background-image: none;
}

@mixin button($bg-color: var(--color-primary), $color: white, $hover-bg: var(--color-secondary), $hover-color: white, $svg-color: white, $svg-hover: white) {
  background-color: $bg-color;
  position: relative;
  display: flex;
  align-items: center;
  width: fit-content;
  font-size: clamp(1.6rem, 1.5rem + 0.208vw, 1.8rem);
  padding: 1rem;
  color: $color;
  border-radius: .8rem;
  margin-top: 1rem;
  box-shadow: 0 10px 20px -8px rgba(0, 0, 0,.7);
  transition: all 0.5s ease;

  &::after {
    content: '';
    display: inline-block;
    position: absolute;
    opacity: 0;
    right: -2rem;
    background-repeat: no-repeat;
    background-position: center center;
    width: 1.3rem;
    aspect-ratio: 1;
    transition: all 0.5s ease;
    right: -3rem;

    @if ($svg-color) {
      @include svg-colorized($arrow-right, $svg-color);
    }

    @else {
      @include svg-colorized($arrow-right, $color);
    }
  }

  &:not(:disabled) {
    &:hover {
      background-color: $hover-bg;
      color: $hover-color;
      padding-right: 3rem;
      padding-left: 1rem;

      &::after {
        opacity: 1;
        right: 1rem;

        @if ($svg-hover) {
          @include svg-colorized($arrow-right, #{$svg-hover});
        }

        @else {
          @include svg-colorized($arrow-right, $hover);
        }
      }
    }
  }


  &:disabled {
    opacity: .5;
  }
}

@mixin simple-button() {
  text-align: center;
  line-height: 1.25;
  font-size: clamp(1.6rem, 1.5rem + 0.208vw, 1.8rem);
  width: 15rem;
  display: block;
  color: var(--color-bg);
  border-radius: 5rem;
  padding: 1rem 1.6rem;
  background: var(--color-highlight);
  border: none;
  font-weight: 600;
  margin: 0 auto;

  &:hover {
    cursor: pointer;
    background: var(--color-accent);
    color: var(--color-text-primary);
  }

  &::after {
    display: none;
  }
}

@mixin animate-link-hover($lineColor: var(--color-secondary), $direction: center) {
  position: relative;

  &:hover {
    &:before {
      transform: scaleX(1);
    }
  }

  &:before {
    content: "";
    position: absolute;
    display: block;
    width: 100%;
    height: .15rem;
    bottom: -.2rem;
    left: 0;
    background-color: $lineColor;
    transform: scaleX(0);
    transition: transform 0.3s ease;
    transform-origin: top $direction;
  }
}

@mixin heading($size: 'm') {
  font-family: $heading-font-family;
  line-height: 1.3;

  @if map-has-key($heading-sizes, $size) {
    $size-style: map-get($heading-sizes, $size);
    font-size: map-get($size-style, font-size);
    margin: map-get($size-style, margin);
  } @else {
    @warn "Heading size '#{$size}' not found. Using the default 'm' size.";
    $size-style: map-get($heading-sizes, 'm');
    font-size: map-get($size-style, font-size);
    margin: map-get($size-style, margin);
  }
}

@mixin display($size: 'l') {
  font-family: $heading-font-family;
  line-height: 1.3;

  @if map-has-key($display-sizes, $size) {
    $size-style: map-get($display-sizes, $size);
    font-size: map-get($size-style, font-size);
    margin: map-get($size-style, margin);
  } @else {
    @warn "Heading size '#{$size}' not found. Using the default 'm' size.";
    $size-style: map-get($display-sizes, 'm');
    font-size: map-get($size-style, font-size);
    margin: map-get($size-style, margin);
  }
}

@mixin body-styles($styles) {
  @each $property, $value in $styles {
    #{$property}: $value;
  }
}
